import pandas as pd
import numpy as np
import sns as sns
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score
import pickle
import seaborn as sns


# Load the crop dataset
crop = pd.read_csv('Crop_recommendation.csv')

# Check the first few rows of the dataset
#print(crop.head())

# Check the shape of the dataset
#print("Shape of the dataset:", crop.shape)

# Check for missing values in the dataset
print("Missing values:\n", crop.isnull().sum())

# Check for duplicated rows in the dataset
print("Duplicated rows:", crop.duplicated().sum())

# Check the dataset information
print(crop.info())

# Check the summary statistics of the dataset
print(crop.describe())

# Explore the data by plotting some features
sns.set(style="whitegrid")
plt.figure(figsize=(12, 6))

# Group the data by label and plot the average values for some features
grouped = crop.groupby("label")
grouped.mean()["N"].plot(kind="barh")
plt.title("Average N content for different crops")
plt.show()

grouped.mean()["P"].plot(kind="barh")
plt.title("Average P content for different crops")
plt.show()

grouped.mean()["K"].plot(kind="barh")
plt.title("Average K content for different crops")
plt.show()

grouped.mean()["temperature"].plot(kind="barh")
plt.title("Average temperature for different crops")
plt.show()

grouped.mean()["rainfall"].plot(kind="barh")
plt.title("Average rainfall for different crops")
plt.show()

grouped.mean()["humidity"].plot(kind="barh")
plt.title("Average humidity for different crops")
plt.show()

grouped.mean()["ph"].plot(kind="barh")
plt.title("Average pH for different crops")
plt.show()

# Mapping crop labels to numeric values
crop_dict = {
    'rice': 1, 'maize': 2, 'jute': 3, 'cotton': 4, 'coconut': 5, 'papaya': 6, 'orange': 7, 'apple': 8, 'muskmelon': 9,
    'watermelon': 10, 'grapes': 11, 'mango': 12, 'banana': 13, 'pomegranate': 14, 'lentil': 15, 'blackgram': 16,
    'mungbean': 17, 'mothbeans': 18, 'pigeon-peas': 19, 'kidneybeans': 20, 'chickpea': 21, 'coffee': 22
}

# Adding a new column for numeric labels
crop['label_num'] = crop['label'].map(crop_dict)

# Drop the original label column
crop.drop('label', axis=1, inplace=True)

# Split the dataset into features (X) and labels (y)
X = crop.iloc[:, :-1]
y = crop.iloc[:, -1]

# Drop rows with missing target values (NaN)
crop = crop.dropna(subset=['label_num'])

# Update X and y after removing rows with missing values
X = crop.iloc[:, :-1]
y = crop.iloc[:, -1]

# Split the data into training and testing sets(random_state=42: This is used to ensure reproducibility)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Apply feature scaling (you can choose between MinMaxScaler or StandardScaler)
# uses MinMaxScaler to scale the features in the training and testing sets between 0 and 1
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Create an instance of the K-Nearest Neighbors (KNN) model with 5 neighbors
knn = KNeighborsClassifier(n_neighbors=5)

# Train the KNN model
knn.fit(X_train_scaled, y_train)


# Define a function to make predictions using the trained KNN model
def predict_crop(N, P, K, temperature, humidity, pH, rainfall):
    input_values = np.array([[N, P, K, temperature, humidity, pH, rainfall]])
    input_values_scaled = scaler.transform(input_values)
    prediction = knn.predict(input_values_scaled)
    return prediction[0]


# Example input values
N = 114
P = 21
K = 55
temperature = 25.44
humidity = 87.94
pH = 6.47
rainfall = 257.52

# Make a crop prediction
predicted_crop = predict_crop(N, P, K, temperature, humidity, pH, rainfall)

# Mapping of predicted label back to crop name
inverse_crop_dict = {v: k for k, v in crop_dict.items()}

if predicted_crop in inverse_crop_dict:
    predicted_crop_name = inverse_crop_dict[predicted_crop]
    print(f"The best crop to be cultivated is: {predicted_crop_name}")
else:
    print("Sorry, we could not determine the best crop to be cultivated with the provided data.")

# Save the KNN model to a file
with open('knn_model.pkl', 'wb') as model_file:
    pickle.dump(knn, model_file)

# Output the original labels used for mapping
print(crop_dict)

# Output the KNN model accuracy on the test data
y_pred = knn.predict(X_test_scaled)
accuracy = accuracy_score(y_test, y_pred)
print(f"KNN Model Accuracy: {accuracy:.4f}")

# Output the first few rows of the dataset
print(crop.head())

